{% extends "forms/field.html.twig" %}
{% set toastui_id = unique_id(6, {'prefix': 'tui_'}) %}
{% set configs = config.plugins['admin-addon-toast-ui-editor'] %}
{% block label %}
    {% if field.label %}
        {% set hint = field.help ? 'data-hint="' ~ field.help|tu|raw ~ '"': '' %}
        <div class="form-label form-field hint--bottom" {{ hint }}>{{ field.label|tu|raw }}</div>
    {% endif %}
{% endblock %}
{% block field %}
    <div class="form-field {{ field.classes|default('') }}">
        <div class="form-data">
            <textarea
                class="toastui-shadow"
                data-bound="{{ toastui_id }}"
                name="{{ (scope ~ field.name)|fieldName }}"
                {% if field.disabled or isDisabledToggleable %}disabled="disabled"{% endif %}
                {% if field.placeholder %}placeholder="{{ field.placeholder|tu }}"{% endif %} {# this probably has no effect and may not have an equivalent in Toast UI?? #}
                {# ignoring field.autofocus #}
                {% if field.novalidate in ['on', 'true', 1] %}novalidate="novalidate"{% endif %}
                {% if field.readonly in ['on', 'true', 1] %}readonly="readonly"{% endif %} {# see also JS setting this attribute below #}
            >{{ value }}</textarea>
        </div>
        <div id="{{ toastui_id }}"></div>
        {% script %}
        addEventListener('load', function() {
            const toastUiId = '{{ toastui_id }}'; // let's make this marginally easier
            const editorElement = document.getElementById(toastUiId);
            const boundTextarea = editorElement.parentElement.querySelector("textarea.toastui-shadow[data-bound='" + toastUiId + "']");

            const theseOptions = Object.assign(
                {{ configs.defaults|json_encode|raw }}, /* plugin config */
                {{ field.attributes.toastui|default({})|json_encode(constant('JSON_FORCE_OBJECT'))|raw }}, /* instance */
                {
                    initialValue: '{{ value|e('js') }}',
                    el: editorElement,
                } /* runtime */ );
            const thisEditor = toastui.Editor.factory(theseOptions);

            if(typeof thisEditor !== undefined && typeof boundTextarea !== undefined) {
                boundTextarea.style.display = 'none';
                boundTextarea.setAttribute('readonly', 'readonly');

                thisEditor.on('change', function() {
                    boundTextarea.value = thisEditor.getMarkdown();
                    });
            }

            });
        {% endscript %}
    </div>

{% endblock %}
