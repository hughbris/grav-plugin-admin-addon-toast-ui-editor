{% extends "forms/field.html.twig" %}
{% set toastui_id = unique_id(6, {'prefix': 'tui_'}) %}
{% set configs = config.plugins['admin-addon-toast-ui-editor'] %}
{% block label %}
    {% if field.label %}
        {% set hint = field.help ? 'data-hint="' ~ field.help|tu|raw ~ '"': '' %}
        <div class="form-label form-field hint--bottom" {{ hint }}>{{ field.label|tu|raw }}</div>
    {% endif %}
{% endblock %}
{% block field %}
    <div class="form-field {{ field.classes|default('') }}">
        <div class="form-data">
            <textarea
                class="toastui-shadow"
                data-bound="{{ toastui_id }}"
                name="{{ (scope ~ field.name)|fieldName }}"
                {% if field.disabled or isDisabledToggleable %}disabled="disabled"{% endif %}
                {% if field.placeholder %}placeholder="{{ field.placeholder|tu }}"{% endif %} {# this probably has no effect and may not have an equivalent in Toast UI?? #}
                {# ignoring field.autofocus #}
                {% if field.novalidate in ['on', 'true', 1] %}novalidate="novalidate"{% endif %}
                {% if field.readonly in ['on', 'true', 1] %}readonly="readonly"{% endif %} {# see also JS setting this attribute below #}
            >{{ value }}</textarea>
        </div>
        <div id="{{ toastui_id }}"></div>
        {% script %}
        addEventListener('load', function() {

            // let's make the make the JS less interpolated (deterpolated??) ..
            const toastUiId = '{{ toastui_id }}';
            const editorDefaultOptions = {{ configs.defaults|json_encode|raw }};
            const fieldCustomOptions = {{ field.attributes.toastui|default({})|json_encode(constant('JSON_FORCE_OBJECT'))|raw }};
            const editorInitialValue = '{{ value|e('js') }}';
            const editorDefaultToolbar = {{ configs.toolbar|json_encode|raw }};

            const editorElement = document.getElementById(toastUiId);
            const boundTextarea = editorElement.parentElement.querySelector("textarea.toastui-shadow[data-bound='" + toastUiId + "']");

            const editorRuntimeOptions = {
                initialValue: editorInitialValue,
                el: editorElement,
                };
            const theseOptions = Object.assign(
                editorDefaultOptions,
                fieldCustomOptions,
                editorRuntimeOptions );
            const thisEditor = toastui.Editor.factory(theseOptions);

            {# TODO: support overrides for instance properties #}
            editorDefaultToolbar['remove'].forEach( function(itemName) {
                thisEditor.removeToolbarItem(itemName);
                });

            // Add image insertion popup WIP
            const container = document.createElement('div'),
                form = document.createElement('form');
            form.setAttribute('name', 'addImageCustom');
            container.appendChild(form);
            // not sure I'm winning with this DOM approach but it would give me JS names for the nodes I want to use later, so instead I am going to set those straight after this block use DOM selector methods
            form.innerHTML = `
                <label>Image location</label>
                <input name="url" type="text" />
                <label>Alternate Text</label>
                <input name="alt" type="text" />
                <div class="toastui-editor-button-container">
                    <button type="button" class="toastui-editor-close-button">Cancel</button>
                    <input type="submit" class="toastui-editor-ok-button" value="Insert" />
                </div>
            `;
            const buttons = {
                close: container.querySelector('.toastui-editor-close-button'),
                submit: container.querySelector('.toastui-editor-ok-button'),
                };
            buttons.submit.style.display = 'inline'; // TODO: see about putting this somewhere more sensible
            const fields = {
                url: container.querySelector("[name='url']"),
                alt: container.querySelector("[name='alt']"),
                };

            const closePopup = () => {
                console.log('Close popup');
                thisEditor.eventEmitter.emit('closePopup');
                thisEditor.focus();
                };

            buttons['close'].addEventListener('click', closePopup);

            form.addEventListener('submit', (e) => {
                e.preventDefault();
                console.log('Insert button', e);
                thisEditor.eventEmitter.emit('command', 'addMarkdownImage', {
                    url: fields.url.value,
                    alt: fields.alt.value,
                    });
                closePopup();
                });

            thisEditor.insertToolbarItem({}, {
                name: 'markdownImagePopup',
                tooltip: 'Add an image',
                popup: {
                    body: container,
                    className: 'FIXME',
                    style: { width: 'auto' },
                }   ,
                text: 'IMG',
                className: 'toastui-editor-toolbar-icons first',
                style: { backgroundImage: 'none' },
                });

            // https://github.com/nhn/tui.editor/issues/2950
            thisEditor.addCommand('markdown', 'addMarkdownImage', (options, ed) => {
                console.log('addMarkdownImage', options, ed, this);
                thisEditor.replaceSelection('![' + options.alt + '](' + options.url + ')');
                });

            if(typeof thisEditor !== undefined && typeof boundTextarea !== undefined) {
                boundTextarea.style.display = 'none';
                boundTextarea.setAttribute('readonly', 'readonly');

                thisEditor.on('change', function() {
                    boundTextarea.value = thisEditor.getMarkdown();
                    console.log('change value of ' + boundTextarea.name);
                    });
            }

            });
        {% endscript %}
    </div>

{% endblock %}
